{"version":3,"sources":["components/FormInput/FormInput.js","components/RowTask/RowTask.js","Model/TaskModel.js","components/SortSection/SortSection.js","page/Todo/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["FormInput","onKeyDown","value","onChange","Container","Form","onSubmit","e","preventDefault","Group","Control","type","placeholder","List","props","className","index","checkComplete","checked","status","onClick","clickTarsh","RowTask","tasks","onDelete","onCheck","filter","filterData","item","complete","data","map","task","content","Table","responsive","id","TaskModel","this","SortSection","coubnterComplete","Button","variant","Todo","useState","setTasks","setTask","setFilter","activeCounter","setActiveCounter","useEffect","length","Row","Col","lg","xs","event","key","target","concat","tagName","taskIndex","getAttribute","parentNode","isChacked","innerHTML","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c0ae6f9.chunk.js","sourcesContent":["import { Form, Container } from 'react-bootstrap';\r\n\r\nfunction FormInput({onKeyDown ,value, onChange}) {\r\n\r\n    return (\r\n        <div>   <Container>\r\n                <Form onSubmit={e => e.preventDefault()}>\r\n                    \r\n                    <Form.Group >\r\n                        <Form.Control type=\"text\" placeholder=\"Add New Task\" onKeyDown={onKeyDown} value={value} onChange={onChange} />\r\n                    </Form.Group>\r\n                </Form>\r\n                </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormInput;\r\n","import { Container, Table } from 'react-bootstrap';\r\nimport './RowTask.css'\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport { useState } from 'react';\r\n\r\n\r\nfunction List(props) {\r\n  // const\r\n  return <tr className=\"border_bottom\">\r\n    <td className=\"check\">\r\n      <input index={props.index} type=\"checkbox\" onChange={props.checkComplete} checked={props.status} />\r\n    </td>\r\n    {props.status\r\n      ? <td className=\"complete\">{props.value}</td>\r\n      : <td className=\"value\">{props.value}</td>\r\n    }\r\n    <td><IoTrashOutline className=\"iconWarper\" onClick={props.clickTarsh} index={props.index} className=\"icon\" /></td>\r\n  </tr>;\r\n}\r\n\r\nfunction RowTask({ tasks, onDelete, onCheck, filter }) {\r\n\r\n  if (filter == \"Completed\") {\r\n    var filterData = tasks.filter(item => item.complete === true)\r\n  } else if (filter == \"Active\") {\r\n    var filterData = tasks.filter(item => item.complete === false)\r\n  } else {\r\n    var filterData = tasks\r\n  }\r\n\r\n  const data = filterData.map((task, index) =>\r\n    <List\r\n      key={index}\r\n      index={index}\r\n      value={task.content}\r\n      status={task.complete}\r\n      clickTarsh={onDelete}\r\n      checkComplete={onCheck}\r\n    />\r\n  )\r\n  return (\r\n    <div className=\"c-rowtask\">\r\n        <Table responsive=\"sm\" id=\"todo-table\" >\r\n          <tbody>\r\n            {data}\r\n          </tbody>\r\n        </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RowTask;\r\n\r\n\r\n\r\n","class TaskModel {\r\n    constructor(content, complete) {\r\n        this.content = content;\r\n        this.complete = complete\r\n    }\r\n}\r\n\r\nexport default TaskModel;","import { Container, Button } from 'react-bootstrap';\r\nimport './SortSection.css'\r\n\r\n\r\nfunction SortSection({onClick, coubnterComplete}) {\r\n\r\n    return (\r\n        <div className=\"c-sortsection\">\r\n            <div className=\"bold\"><span>{coubnterComplete}</span> Items Left</div>\r\n            <div className=\"button-section\">\r\n                <Button onClick={onClick} variant=\"outline-dark\">All</Button>\r\n                <Button onClick={onClick} variant=\"outline-dark\">Active</Button>\r\n                <Button onClick={onClick} variant=\"outline-dark\">Completed</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SortSection;\r\n","import './Todo.css'\r\nimport FormInput from '../../components/FormInput/FormInput'\r\nimport { useState, useEffect } from 'react';\r\nimport RowTask from '../../components/RowTask/RowTask';\r\nimport TaskModel from '../../Model/TaskModel'\r\nimport SortSection from '../../components/SortSection/SortSection'\r\nimport { Container ,Row, Col } from 'react-bootstrap';\r\n\r\n\r\nfunction Todo() {\r\n    const [tasks, setTasks] = useState([]);\r\n    const [task, setTask] = useState(\"\");\r\n    const [filter, setFilter] = useState(\"\");\r\n    const [activeCounter, setActiveCounter] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setActiveCounter(tasks.filter(item => item.complete === false).length)\r\n    }); \r\n    \r\n    // Only re-run the effect if count changes\r\n    \r\n\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter' && event.target.value) {\r\n          setTasks(tasks.concat(new TaskModel(event.target.value, false)));\r\n          setTask(\"\")\r\n        }\r\n      }\r\n    \r\n      \r\n    const populateInput = (event) => {\r\n      setTask(event.target.value) \r\n    }\r\n\r\n    const deleteItem = (e) => {\r\n      if(e.target.tagName == 'svg'){\r\n        var taskIndex = e.target.getAttribute(\"index\")\r\n      }else{\r\n        var taskIndex = e.target.parentNode.getAttribute(\"index\") \r\n      }\r\n\r\n      setTasks(tasks.filter(item => item !== tasks[taskIndex]))     \r\n    }\r\n\r\n    const checkedTask = (e) => { \r\n      const isChacked = tasks[(e.target.getAttribute(\"index\"))].complete\r\n      tasks[(e.target.getAttribute(\"index\"))].complete = !isChacked\r\n   \r\n      setTasks(tasks.filter(item => item == item))     \r\n    }\r\n\r\n    //Filter\r\n    const getFilter = (e) =>{\r\n      setFilter(e.target.innerHTML)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='p-todo'>\r\n          <Container>\r\n            <Row>\r\n            <Col lg=\"12\" xs=\"6\">\r\n              <h1>Todos</h1>\r\n            </Col>           \r\n            <Col lg=\"12\"  xs=\"6\">\r\n              <h5>Made by Adam Tsityat</h5>\r\n            </Col>\r\n            </Row>\r\n            <FormInput value={task} onKeyDown={handleKeyDown}  onChange={populateInput}/>\r\n            <RowTask filter={filter} tasks = {tasks} onDelete={deleteItem} onCheck={checkedTask}/>\r\n            <SortSection onClick={getFilter} coubnterComplete={activeCounter} />\r\n          </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport Todo from './page/Todo/Todo'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}